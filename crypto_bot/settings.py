"""
Django settings for crypto_bot project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Needed to make request bewteen our react app and django
    # https://github.com/OttoYiu/django-cors-headers
    'corsheaders',

    # Celery package to do periodic tasks
    # https://github.com/celery/django-celery-beat
    'django_celery_beat',

    # # Celery package to provide result backends
    # # with django ORM or cache framework
    # # https://github.com/celery/django-celery-results
    # # 'django_celery_results',

     # The rest framework
     # http://www.django-rest-framework.org/api-guide
    'rest_framework',

    # The basic Token authentication
    'rest_framework.authtoken',

    # Library that provide authentication views
    # https://github.com/sunscrapers/djoser
    'djoser',

    # Custom APP
    # Create a custom user model to authentify by email
    'account.apps.AccountConfig',

    # Custom APP
    # Our main app that contains the alerts and bot
    'main_app.apps.MainAppConfig',

    # Custom APP
    # Serve our react app on frontend
    'frontend_app.apps.FrontendAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Middleware for cors header, enable us to communicate with the react app
    # https://github.com/OttoYiu/django-cors-headers
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crypto_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crypto_bot.wsgi.application'



# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        # name of other database for testing purpose
        'TEST_NAME': os.environ.get('DB_TEST_NAME'), 
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Custom react config
# Indicate where lives our react app / app front end
FRONTEND_DIR = os.path.join(BASE_DIR, 'frontend')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = 'static'


STATICFILES_DIRS = [
    os.path.join(FRONTEND_DIR, 'build', 'static'),
]


# Configuration for Django rest framework
# http://www.django-rest-framework.org/api-guide
REST_FRAMEWORK = {

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_MODEL_SERIALIZER_CLASS':(
        'rest_framework.serializers.ModelSerializer',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
}

# Custom auth user model - auth by email instead of username
# https://docs.djangoproject.com/en/1.11/topics/auth/customizing/
AUTH_USER_MODEL = 'account.User'


# Cors settings to allow make request between the react app and the api
# CAREFULL - Modify this value for production
CORS_ORIGIN_ALLOW_ALL = True     

# Celery setting
# http://docs.celeryproject.org/en/latest/django/
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL') # example : 'redis://localhost:6379'
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND') # example : 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE


# Mail configuration
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_USER')

